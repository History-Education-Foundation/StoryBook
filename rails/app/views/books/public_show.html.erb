<% content_for :header, "" %>
<style>
  /* .highlight-read { background: none !important; } */
</style>

<!-- My Library button intentionally omitted for public page -->

<div class="max-w-2xl mx-auto mt-10 bg-white p-8 rounded shadow" id="book-reader-container" data-book-id="<%= @book.id %>">
  <div class="mb-6">
    <div>
      <% ix = 1 %>
      <h1 class="text-3xl font-bold mb-4" data-read-ix="0"><%= @book.title %></h1>
      
      <!-- Book Metadata -->
      <div class="flex flex-wrap gap-2 mb-4">
        <div class="badge badge-lg gap-1" style="background-color: #e0e7ff; color: #4338ca; border-color: #c7d2fe;">
          <i class="fas fa-book-reader"></i>
          <%= @book.reading_level.presence || 'Not specified' %>
        </div>
        
        <div class="badge badge-lg" style="<%= case @book.status
          when 'Draft' then 'background-color: #fef3c7; color: #b45309; border-color: #fde68a;'
          when 'Published' then 'background-color: #d1fae5; color: #047857; border-color: #a7f3d0;'
          when 'Archived' then 'background-color: #f1f5f9; color: #475569; border-color: #e2e8f0;'
          else 'background-color: #f3f4f6; color: #4b5563; border-color: #e5e7eb;' end %>">
          <%= @book.status %>
        </div>
      </div>
      
      <!-- Learning Outcome -->
      <div class="bg-gradient-to-r from-indigo-50 to-purple-50 p-4 rounded-lg border-l-4 mb-4" style="border-left-color: #818cf8;">
        <div class="flex items-start gap-2 mb-2">
          <i class="fas fa-bullseye text-indigo-600 mt-1"></i>
          <span class="font-semibold text-indigo-900">Learning Outcome:</span>
        </div>
        <div class="text-gray-700 text-sm ml-6">
          <%= simple_format(@book.learning_outcome) %>
        </div>
      </div>

      <% @chapters.each do |chapter| %>
        <div class="mt-10 chapter-read-block">
          <!-- Chapter Header -->
          <div class="mb-6 pb-3 border-b-2" style="border-color: #c7d2fe;">
            <h2 class="text-2xl font-semibold mb-2 text-indigo-900" data-read-ix="<%= ix %>"><%= chapter.title %></h2>
            <% ix += 1 %>
            <div class="text-gray-600 text-sm"><%= simple_format(chapter.description) %></div>
          </div>

          <% chapter.pages.order(:id).each do |page| %>
            <div class="my-6 p-6 rounded-lg" style="background: linear-gradient(to bottom right, #ffffff, #faf5ff);">
              <% if page.image.attached? %>
                <div class="flex justify-center mb-6">
                  <%= image_tag url_for(page.image),
                        class: "rounded-lg border-2 max-h-80 object-contain",
                        style: "border-color: #e0e7ff;",
                        loading: "lazy",
                        alt: "" %>
                </div>
              <% end %>

              <div class="text-base text-gray-800 whitespace-pre-line leading-relaxed" data-read-ix="<%= ix %>">
                <%= page.content %>
              </div>

              <% if page.audio_file.attached? %>
                <div class="mt-4 p-3 rounded-lg" style="background-color: #dbeafe; border: 1px solid #bfdbfe;">
                  <div class="flex items-center gap-2 mb-2">
                    <i class="fas fa-headphones text-blue-600"></i>
                    <span class="text-sm font-semibold text-blue-900">Audio Available</span>
                  </div>
                  <audio controls class="w-full">
                    <source src="<%= url_for(page.audio_file) %>" type="audio/mpeg">
                    Your browser does not support the audio element.
                  </audio>
                </div>
              <% else %>
                <div class="mt-4 p-3 rounded-lg flex items-center gap-2" style="background-color: #fef3c7; border: 1px solid #fde68a;">
                  <i class="fas fa-info-circle text-amber-600"></i>
                  <span class="text-sm text-amber-800">No audio available for this page.</span>
                </div>
              <% end %>
            </div>
            <% ix += 1 %>
          <% end %>
        </div>
      <% end %>

      <% if @book.status == "Published" %>
      <div class="fixed bottom-6 right-6 z-50 shadow-xl rounded-lg p-4 flex flex-wrap gap-3" style="background: linear-gradient(to bottom right, #ffffff, #f0f9ff); border: 2px solid #bfdbfe;">
        <button id="play-audio" class="btn btn-sm gap-2" style="background-color: #d1fae5; color: #047857; border-color: #a7f3d0;">
          <i class="fas fa-play"></i>
          Listen
        </button>
        <button id="pause-audio" class="btn btn-sm gap-2" style="background-color: #fed7aa; color: #c2410c; border-color: #fdba74;">
          <i class="fas fa-pause"></i>
          Pause
        </button>
        <button id="stop-audio" class="btn btn-sm gap-2" style="background-color: #fecaca; color: #991b1b; border-color: #fca5a5;">
          <i class="fas fa-stop"></i>
          Stop
        </button>
        <div id="audio-loading" class="hidden ml-2 flex items-center gap-2 text-indigo-600 text-sm font-medium">
          <span class="loader inline-block"></span>
          Loading audio playlist...
        </div>
        <audio id="audio-player" class="hidden mt-3" controls style="width:200px"></audio>
      </div>
      <% end %>
    </div>
  </div>
</div>

<!-- Student Q&A Chat Interface -->
<div class="max-w-2xl mx-auto mt-8 mb-20 bg-white p-6 rounded-lg shadow-lg border-2 border-indigo-200">
  <div class="flex items-center gap-3 mb-4 pb-3 border-b border-indigo-100">
    <div class="bg-indigo-100 rounded-full p-2">
      <i class="fas fa-comments text-indigo-600 text-xl"></i>
    </div>
    <div>
      <h3 class="text-lg font-bold text-indigo-900">Ask Questions About This Book</h3>
      <p class="text-sm text-gray-600">I'm here to help you understand what you're reading!</p>
    </div>
    <div id="student-chat-status" class="ml-auto h-3 w-3 rounded-full bg-yellow-400"></div>
  </div>

  <!-- Chat Messages -->
  <div id="student-chat-messages" class="space-y-3 mb-4 max-h-96 overflow-y-auto p-3 bg-gray-50 rounded-lg min-h-[200px]">
    <div class="text-center text-gray-500 text-sm py-8">
      <i class="fas fa-book-reader text-3xl mb-2 text-indigo-300"></i>
      <p>Ask me anything about this book!</p>
      <p class="text-xs mt-1">Questions about characters, plot, vocabulary, themes, etc.</p>
    </div>
  </div>

  <!-- Loading Indicator -->
  <div id="student-loading" class="hidden mb-3 text-center">
    <span class="inline-flex items-center text-indigo-600 text-sm">
      <span class="student-loader mr-2"></span>
      Thinking...
    </span>
  </div>

  <!-- Suggested Questions -->
  <div class="mb-3 flex flex-wrap gap-2">
    <button onclick="askStudentQuestion(this)" class="px-3 py-1 text-xs bg-indigo-50 hover:bg-indigo-100 rounded-full text-indigo-700 border border-indigo-200">
      What is this book about?
    </button>
    <button onclick="askStudentQuestion(this)" class="px-3 py-1 text-xs bg-indigo-50 hover:bg-indigo-100 rounded-full text-indigo-700 border border-indigo-200">
      Who are the main characters?
    </button>
    <button onclick="askStudentQuestion(this)" class="px-3 py-1 text-xs bg-indigo-50 hover:bg-indigo-100 rounded-full text-indigo-700 border border-indigo-200">
      What's the learning goal?
    </button>
  </div>

  <!-- Chat Input -->
  <div class="flex gap-2">
    <input 
      type="text" 
      id="student-message-input" 
      class="flex-1 border-2 border-indigo-200 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent" 
      placeholder="Type your question here..."
      onkeypress="if(event.key === 'Enter') sendStudentMessage()"
    >
    <button 
      onclick="sendStudentMessage()" 
      class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-2 rounded-lg text-sm font-medium transition-colors flex items-center gap-2"
    >
      <i class="fas fa-paper-plane"></i>
      Ask
    </button>
  </div>
</div>

<%= javascript_include_tag "llama_bot_rails/application" %>
<% if defined?(action_cable_meta_tag) %>
  <%= action_cable_meta_tag %>
<% end %>
<link rel="stylesheet" href="https://unpkg.com/@tailwindcss/typography@0.4.x/dist/typography.min.css">
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
// Student Chat Agent Setup
let studentChatSubscription = null;
let studentThreadId = null;
let studentLastPongTime = Date.now();
let studentProcessedMessageIds = new Set();
let studentLastToolCallArgs = {};
let currentBookId = null;

function waitForStudentCableConnection(callback) {
  const interval = setInterval(() => {
    if (window.LlamaBotRails && LlamaBotRails.cable) {
      clearInterval(interval);
      callback(LlamaBotRails.cable);
    }
  }, 50);
}

function initializeStudentChat() {
  // Disconnect existing subscription if it exists
  if (studentChatSubscription) {
    studentChatSubscription.unsubscribe();
    studentChatSubscription = null;
  }

  // Reset state for new book and create stable thread_id per book
  // CRITICAL: Extract bookId from DOM data attribute to avoid Turbo cache issues with ERB
  const bookReaderContainer = document.getElementById('book-reader-container');
  const bookId = bookReaderContainer ? bookReaderContainer.dataset.bookId : '<%= @book.id %>';
  const userId = '<%= current_user&.id || "guest" %>';
  currentBookId = bookId;
  
  // Generate a STABLE thread_id per book (NO timestamp)
  // Each book gets its own isolated conversation history
  // This ensures Book A and Book B have completely separate contexts
  studentThreadId = `student_user_${userId}_book_${bookId}`;
  
  studentProcessedMessageIds = new Set();
  
  // Clear chat messages and show welcome message
  const messagesDiv = document.getElementById('student-chat-messages');
  if (messagesDiv) {
    messagesDiv.innerHTML = `
      <div class="text-center text-gray-500 text-sm py-8">
        <i class="fas fa-book-reader text-3xl mb-2 text-indigo-300"></i>
        <p>Ask me anything about this book!</p>
        <p class="text-xs mt-1">Questions about characters, plot, vocabulary, themes, etc.</p>
      </div>
    `;
  }

  waitForStudentCableConnection((consumer) => {
    const sessionId = crypto.randomUUID();

    studentChatSubscription = consumer.subscriptions.create({
      channel: 'LlamaBotRails::ChatChannel',
      session_id: sessionId,
      agent_state_builder_class: "StudentAgentStateBuilder"
    }, {
      connected() {
        updateStudentStatusIcon('bg-green-500');
        studentLastPongTime = Date.now();
      },
      disconnected() {
        updateStudentStatusIcon('bg-red-500');
      },
      received(data) {
        const parsedData = JSON.parse(data).message;

        const messageId = `${parsedData.type}_${parsedData.content?.substring(0, 50)}_${Date.now()}`;
        
        if (studentProcessedMessageIds.has(messageId)) {
          return;
        }

        studentProcessedMessageIds.add(messageId);

        if (studentProcessedMessageIds.size > 100) {
          const idsArray = Array.from(studentProcessedMessageIds);
          studentProcessedMessageIds = new Set(idsArray.slice(-100));
        }

        switch (parsedData.type) {
          case "ai":
            addStudentMessage(parsedData.content, 'ai');
            break;
          case "tool":
            break;
          case "error":
            addStudentMessage(parsedData.content, 'error');
            break;
          case "pong":
            studentLastPongTime = Date.now();
            updateStudentStatusIcon('bg-green-500');
            break;
        }
      }
    });
  });
}

// Initialize chat on page load
document.addEventListener('turbo:load', initializeStudentChat);

// Clean up on navigation away
document.addEventListener('turbo:before-visit', () => {
  if (studentChatSubscription) {
    studentChatSubscription.unsubscribe();
    studentChatSubscription = null;
  }
});

function updateStudentStatusIcon(statusClass) {
  const statusIndicator = document.getElementById('student-chat-status');
  statusIndicator.classList.remove('bg-green-500', 'bg-yellow-400', 'bg-red-500');
  statusIndicator.classList.add(statusClass);
}

function askStudentQuestion(buttonElement) {
  const questionText = buttonElement.textContent;
  const messageInput = document.getElementById('student-message-input');
  messageInput.value = questionText;
  sendStudentMessage();
}

function sendStudentMessage() {
  const input = document.getElementById('student-message-input');
  const message = input.value.trim();
  
  if (message && studentChatSubscription) {
    // Remove welcome message if exists
    const welcomeMessage = document.querySelector('#student-chat-messages .text-center');
    if (welcomeMessage) {
      welcomeMessage.remove();
    }
    
    addStudentMessage(message, 'human');
    input.value = '';
    showStudentLoading();

    // studentThreadId is now generated in initializeStudentChat()
    // No need to generate it here since each book has its own thread

    const messageData = {
      message: message,
      thread_id: studentThreadId,
      book_id: currentBookId,
      raw_params: {
        controller: 'books',
        action: 'public_show',
        id: currentBookId
      }
    };
    
    studentChatSubscription.send(messageData);
  }
}

function addStudentMessage(text, sender) {
  if (sender === 'ai') {
    hideStudentLoading();
  }

  const messagesDiv = document.getElementById('student-chat-messages');
  const messageDiv = document.createElement('div');
  
  if (sender === 'human') {
    messageDiv.className = 'flex justify-end';
    messageDiv.innerHTML = `
      <div class="bg-indigo-100 rounded-lg py-2 px-4 max-w-[80%] border border-indigo-200">
        <p class="text-gray-800 text-sm">${text}</p>
      </div>
    `;
  } else if (sender === 'ai') {
    messageDiv.className = 'flex';
    messageDiv.innerHTML = `
      <div class="prose prose-sm max-w-none bg-white border-2 border-indigo-100 rounded-lg py-3 px-4 max-w-[80%] shadow-sm">
        ${parseStudentMarkdown(text)}
      </div>
    `;
  } else if (sender === 'error') {
    messageDiv.className = 'flex';
    messageDiv.innerHTML = `
      <div class="bg-red-100 border-2 border-red-300 text-red-800 rounded-lg py-2 px-4 max-w-[80%]">
        <p class="text-sm">${text}</p>
      </div>
    `;
  }
  
  messagesDiv.appendChild(messageDiv);
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function showStudentLoading() {
  document.getElementById('student-loading').classList.remove('hidden');
}

function hideStudentLoading() {
  document.getElementById('student-loading').classList.add('hidden');
}

function parseStudentMarkdown(text) {
  if (!text) return '';
  
  try {
    marked.setOptions({
      breaks: true,
      gfm: true,
      sanitize: false,
      smartLists: true,
      smartypants: true
    });
    let html = marked.parse(text);
    html = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
    html = html.replace(/\son\w+="[^"]*"/gi, '');
    html = html.replace(/\son\w+='[^']*'/gi, '');
    return html;
  } catch (error) {
    console.error('Markdown parsing error:', error);
    return text.replace(/\n/g, '<br>');
  }
}
</script>

<style>
.student-loader {
  border: 3px solid #e0e7ff;
  border-top: 3px solid #4f46e5;
  border-radius: 50%;
  width: 16px;
  height: 16px;
  animation: spin 1s linear infinite;
  display: inline-block;
}
</style>

<script>
// Highlight passage when audio is playing
function setHighlightOnAudio(isActive) {
  const blocks = document.querySelectorAll('[data-read-ix]');
  blocks.forEach(block => {
    if (isActive) {
      block.classList.add('highlight-read');
    } else {
      block.classList.remove('highlight-read');
    }
  });
}

document.addEventListener('turbo:load', function() {
  const playButton = document.getElementById('play-audio');
  const pauseButton = document.getElementById('pause-audio');
  const stopButton = document.getElementById('stop-audio');
  const loading = document.getElementById('audio-loading');
  const audioPlayer = document.getElementById('audio-player');

  if (!playButton) return;

  let audioPlaylist = [];
  let currentTrackIdx = 0;
  let paused = false;
  let finished = false;

  async function fetchAudioPlaylist() {
    const matches = window.location.pathname.match(/books\/(\d+)\/public/);
    const bookId = matches ? matches[1] : null;
    if (!bookId) return [];
    const resp = await fetch(`/books/${bookId}/audio_playlist`);
    if (!resp.ok) return [];
    const data = await resp.json();
    return (data.audios || []).map(entry => entry.url);
  }

  async function playPlaylist(startAt = 0) {
    setHighlightOnAudio(true);
    loading.classList.remove('hidden');
    audioPlayer.classList.add('hidden');
    if (!audioPlaylist.length) {
      audioPlaylist = await fetchAudioPlaylist();
    }
    if (!audioPlaylist.length) {
      alert('No audio files found for this book.');
      loading.classList.add('hidden');
      setHighlightOnAudio(false);
      finished = false;
      return;
    }
    finished = false;
    paused = false;
    playTrack(startAt);
  }

  function playTrack(idx) {
    if (idx >= audioPlaylist.length) {
      loading.classList.add('hidden');
      setHighlightOnAudio(false);
      finished = true;
      return;
    }
    currentTrackIdx = idx;
    audioPlayer.src = audioPlaylist[idx];
    audioPlayer.classList.remove('hidden');
    audioPlayer.play().then(() => {});
  }

  audioPlayer.onended = function() {
    if (paused || finished) return;
    setTimeout(() => playTrack(currentTrackIdx + 1), 800);
  };

  playButton.onclick = () => {
    // Resume if paused and not finished
    if (paused && audioPlaylist.length && !finished) {
      paused = false;
      setHighlightOnAudio(true);
      audioPlayer.play();
      return;
    }
    // Restart from beginning if finished or never started
    playPlaylist(0);
  };

  pauseButton.onclick = function() {
    paused = true;
    setHighlightOnAudio(false);
    if (!audioPlayer.paused) audioPlayer.pause();
  }

  stopButton.onclick = function() {
    paused = true;
    finished = true;
    setHighlightOnAudio(false);
    audioPlayer.pause();
    audioPlayer.currentTime = 0;
    currentTrackIdx = 0;
    audioPlaylist = [];
    loading.classList.add('hidden');
  }
});
</script>

<style>
.loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #6366f1;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  animation: spin 1s linear infinite;
  display: inline-block;
  vertical-align: middle;
}
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>
