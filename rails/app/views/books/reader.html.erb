<% content_for :header, "" %>
<style>
  /* .highlight-read { background: none !important; } */
</style>

<div class="fixed top-4 left-4 z-50">
  <%= link_to library_books_path, class: "btn gap-2 shadow-xl btn-sm", style: "background-color: #e0e7ff; color: #4338ca; border-color: #c7d2fe;" do %>
    <i class="fas fa-arrow-left"></i>
    <span class="hidden sm:inline">My Library</span>
  <% end %>
</div>

<div class="max-w-2xl mx-auto mt-10 bg-white p-8 rounded shadow">
  <div class="mb-6">
    <div>
      <% ix = 1 %>
      <h1 class="text-3xl font-bold mb-4" data-read-ix="0"><%= @book.title %></h1>
      
      <!-- Book Metadata -->
      <div class="flex flex-wrap gap-2 mb-4">
        <div class="badge badge-lg gap-1" style="background-color: #e0e7ff; color: #4338ca; border-color: #c7d2fe;">
          <i class="fas fa-book-reader"></i>
          <%= @book.reading_level.presence || 'Not specified' %>
        </div>
        
        <div class="badge badge-lg" style="<%= case @book.status
          when 'Draft' then 'background-color: #fef3c7; color: #b45309; border-color: #fde68a;'
          when 'Published' then 'background-color: #d1fae5; color: #047857; border-color: #a7f3d0;'
          when 'Archived' then 'background-color: #f1f5f9; color: #475569; border-color: #e2e8f0;'
          else 'background-color: #f3f4f6; color: #4b5563; border-color: #e5e7eb;' end %>">
          <%= @book.status %>
        </div>
      </div>
      
      <!-- Learning Outcome -->
      <div class="bg-gradient-to-r from-indigo-50 to-purple-50 p-4 rounded-lg border-l-4 mb-4" style="border-left-color: #818cf8;">
        <div class="flex items-start gap-2 mb-2">
          <i class="fas fa-bullseye text-indigo-600 mt-1"></i>
          <span class="font-semibold text-indigo-900">Learning Outcome:</span>
        </div>
        <div class="text-gray-700 text-sm ml-6">
          <%= simple_format(@book.learning_outcome) %>
        </div>
      </div>

      <% @chapters.each do |chapter| %>
        <div class="mt-10 chapter-read-block">
          <!-- Chapter Header -->
          <div class="mb-6 pb-3 border-b-2" style="border-color: #c7d2fe;">
            <h2 class="text-2xl font-semibold mb-2 text-indigo-900" data-read-ix="<%= ix %>"><%= chapter.title %></h2>
            <% ix += 1 %>
            <div class="text-gray-600 text-sm"><%= simple_format(chapter.description) %></div>
          </div>

          <% chapter.pages.order(:id).each do |page| %>
            <div class="my-6 p-6 rounded-lg" style="background: linear-gradient(to bottom right, #ffffff, #faf5ff);">
              <% if page.image.attached? %>
                <div class="flex justify-center mb-6">
                  <%= image_tag url_for(page.image),
                        class: "rounded-lg border-2 max-h-80 object-contain",
                        style: "border-color: #e0e7ff;",
                        loading: "lazy",
                        alt: "" %>
                </div>
              <% end %>

              <div class="text-base text-gray-800 whitespace-pre-line leading-relaxed" data-read-ix="<%= ix %>">
                <%= page.content %>
              </div>

              <% if page.audio_file.attached? %>
                <div class="mt-4 p-3 rounded-lg" style="background-color: #dbeafe; border: 1px solid #bfdbfe;">
                  <div class="flex items-center gap-2 mb-2">
                    <i class="fas fa-headphones text-blue-600"></i>
                    <span class="text-sm font-semibold text-blue-900">Audio Available</span>
                  </div>
                  <audio controls class="w-full">
                    <source src="<%= url_for(page.audio_file) %>" type="audio/mpeg">
                    Your browser does not support the audio element.
                  </audio>
                </div>
              <% else %>
                <div class="mt-4 p-3 rounded-lg flex items-center gap-2" style="background-color: #fef3c7; border: 1px solid #fde68a;">
                  <i class="fas fa-info-circle text-amber-600"></i>
                  <span class="text-sm text-amber-800">No audio available for this page.</span>
                </div>
              <% end %>
            </div>
            <% ix += 1 %>
          <% end %>
        </div>
      <% end %>

      <% if @book.status == "Published" %>
      <div class="fixed bottom-6 right-6 z-50 shadow-xl rounded-lg p-4 flex flex-wrap gap-3" style="background: linear-gradient(to bottom right, #ffffff, #f0f9ff); border: 2px solid #bfdbfe;">
        <button id="play-audio" class="btn btn-sm gap-2" style="background-color: #d1fae5; color: #047857; border-color: #a7f3d0;">
          <i class="fas fa-play"></i>
          Listen
        </button>
        <button id="pause-audio" class="btn btn-sm gap-2" style="background-color: #fed7aa; color: #c2410c; border-color: #fdba74;">
          <i class="fas fa-pause"></i>
          Pause
        </button>
        <button id="stop-audio" class="btn btn-sm gap-2" style="background-color: #fecaca; color: #991b1b; border-color: #fca5a5;">
          <i class="fas fa-stop"></i>
          Stop
        </button>
        <div id="audio-loading" class="hidden ml-2 flex items-center gap-2 text-indigo-600 text-sm font-medium">
          <span class="loader inline-block"></span>
          Loading audio playlist...
        </div>
        <audio id="audio-player" class="hidden mt-3" controls style="width:200px"></audio>
      </div>
      <% end %>
    </div>
  </div>
</div>

<script>
// Highlight passage when audio is playing
function setHighlightOnAudio(isActive) {
  const blocks = document.querySelectorAll('[data-read-ix]');
  blocks.forEach(block => {
    if (isActive) {
      block.classList.add('highlight-read');
    } else {
      block.classList.remove('highlight-read');
    }
  });
}

document.addEventListener('turbo:load', function() {
  const playButton = document.getElementById('play-audio');
  const pauseButton = document.getElementById('pause-audio');
  const stopButton = document.getElementById('stop-audio');
  const loading = document.getElementById('audio-loading');
  const audioPlayer = document.getElementById('audio-player');

  if (!playButton) return;

  let audioPlaylist = [];
  let currentTrackIdx = 0;
  let paused = false;
  let finished = false;

  async function fetchAudioPlaylist() {
    const matches = window.location.pathname.match(/books\/(\d+)\/read/);
    const bookId = matches ? matches[1] : null;
    if (!bookId) return [];
    const resp = await fetch(`/books/${bookId}/audio_playlist`);
    if (!resp.ok) return [];
    const data = await resp.json();
    return (data.audios || []).map(entry => entry.url);
  }

  async function playPlaylist(startAt = 0) {
    setHighlightOnAudio(true);
    loading.classList.remove('hidden');
    audioPlayer.classList.add('hidden');
    if (!audioPlaylist.length) {
      audioPlaylist = await fetchAudioPlaylist();
    }
    if (!audioPlaylist.length) {
      alert('No audio files found for this book.');
      loading.classList.add('hidden');
      setHighlightOnAudio(false);
      finished = false;
      return;
    }
    finished = false;
    paused = false;
    playTrack(startAt);
  }

  function playTrack(idx) {
    if (idx >= audioPlaylist.length) {
      loading.classList.add('hidden');
      setHighlightOnAudio(false);
      finished = true;
      return;
    }
    currentTrackIdx = idx;
    audioPlayer.src = audioPlaylist[idx];
    audioPlayer.classList.remove('hidden');
    audioPlayer.play().then(() => {});
  }

  audioPlayer.onended = function() {
    if (paused || finished) return;
    setTimeout(() => playTrack(currentTrackIdx + 1), 800);
  };

  playButton.onclick = () => {
    // Resume if paused and not finished
    if (paused && audioPlaylist.length && !finished) {
      paused = false;
      setHighlightOnAudio(true);
      audioPlayer.play();
      return;
    }
    // Restart from beginning if finished or never started
    playPlaylist(0);
  };

  pauseButton.onclick = function() {
    paused = true;
    setHighlightOnAudio(false);
    if (!audioPlayer.paused) audioPlayer.pause();
  }

  stopButton.onclick = function() {
    paused = true;
    finished = true;
    setHighlightOnAudio(false);
    audioPlayer.pause();
    audioPlayer.currentTime = 0;
    currentTrackIdx = 0;
    audioPlaylist = [];
    loading.classList.add('hidden');
  }
});
</script>

<style>
.loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #6366f1;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  animation: spin 1s linear infinite;
  display: inline-block;
  vertical-align: middle;
}
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>
