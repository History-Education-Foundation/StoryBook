<% if defined?(javascript_importmap_tags) %> <!-- Rails 7+ -->
  <%= javascript_importmap_tags %>
<% else %> <!-- Rails 6 -->
  <%= javascript_include_tag "application" %>
<% end %>

<%= javascript_include_tag "llama_bot_rails/application" %>
<% if defined?(action_cable_meta_tag) %>
  <%= action_cable_meta_tag %>
<% end %>
<!-- Add Tailwind Typography CDN -->
<link rel="stylesheet" href="https://unpkg.com/@tailwindcss/typography@0.4.x/dist/typography.min.css">
<!-- Add Snarkdown CDN -->
<script src="https://unpkg.com/snarkdown/dist/snarkdown.umd.js"></script>
<!-- Add marked.js for markdown parsing -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<div class="flex flex-col h-screen bg-gray-100">

  <div class="flex flex-col flex-grow bg-white shadow-lg rounded-lg mx-2 md:mx-auto my-2 max-w-4xl">
    <div class="flex items-center justify-between border-b p-4">
      <div class="flex items-center space-x-4">
        <button id="toggle-sidebar" class="p-1 rounded-full hover:bg-gray-200 focus:outline-none" title="Toggle sidebar">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M15 18l-6-6 6-6" />
          </svg>
        </button>
        <div class="flex items-center">
          <img src="https://service-jobs-images.s3.us-east-2.amazonaws.com/7rl98t1weu387r43il97h6ipk1l7" alt="LlamaBot Logo" class="h-8 w-8">
          <div id="connectionStatusIconForLlamaBot" class="ml-2 h-3 w-3 rounded-full bg-yellow-400"></div>
        </div>
        <h1 class="text-xl font-bold">Leo the Llama</h1>
      </div>
    </div>
    <div id="chat-messages" class="flex-grow overflow-y-auto p-4 space-y-4">
      <!-- Messages will be added here dynamically -->
    </div>
    
    <!-- Simple loading indicator with just animated text -->
    <div id="loading-indicator" class="hidden p-4 text-center">
      <span class="inline-flex items-center text-gray-600">
        Leo is thinking<span class="loading-dots"></span>
      </span>
    </div>
    
    <!-- Suggested Prompts - Always visible above input -->
    <div id="suggested-prompts" class="p-4 border-t border-gray-200">
      <div class="text-sm text-gray-600 mb-2">Quick actions:</div>
      <div class="space-y-2">
        <div class="flex flex-wrap gap-2">
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">List all my books</button>
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">Create a new book</button>
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">Add a chapter to my latest book</button>
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">Generate a page image</button>        
        </div>
        <div class="flex flex-wrap gap-2">
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">Rewrite this page more clearly</button>
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">Summarize this chapter</button>
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">List chapters in Book 1</button>
          <button onclick="selectPrompt(this)" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">Show me all pages in Chapter 1</button>        
        </div>
      </div>
    </div>
    
    <div class="border-t border-gray-200 p-4 flex">
      <input type="text" id="message-input" class="flex-grow border rounded-l-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Type your message...">
      <button onclick="sendMessage()" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-r-lg">Send</button>
    </div>
  </div>
</div>

<div id="modalOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"></div>
<div id="errorModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg shadow-xl p-6 max-w-md mx-auto">
    <h2 class="text-xl font-bold mb-4">Connection Error</h2>
    <p class="mb-6">Lost connection to Leo. Is LlamaBot running? Refresh the page.</p>
    <button onclick="closeErrorModal()" class="w-full bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded">Close</button>
  </div>
</div>

<script>
  let currentThreadId = null;
  let isSidebarCollapsed = false;
  let lastPongTime = Date.now();
  let redStatusStartTime = null;
  let errorModalShown = false;
  let connectionCheckInterval;
  let subscription = null;
  let lastToolCallArgs = {}; // Store tool call arguments to use when displaying results

  function waitForCableConnection(callback) {
    const interval = setInterval(() => {
      if (window.LlamaBotRails && LlamaBotRails.cable) {
        clearInterval(interval);
        callback(LlamaBotRails.cable);
      }
    }, 50);
  }
  
  waitForCableConnection((consumer) => {
    const sessionId = crypto.randomUUID();

    subscription = consumer.subscriptions.create({channel: 'LlamaBotRails::ChatChannel', session_id: sessionId}, {
      connected() {
        console.log('Connected to chat channel');
        lastPongTime = Date.now();
        loadThreads();
        startConnectionCheck();
      },
      disconnected() {
        console.log('Disconnected from chat channel');
        updateStatusIcon('bg-red-500');
      },
      received(data) {
        const parsedData = JSON.parse(data).message;
        console.log("LLM Response:", parsedData);
        switch (parsedData.type) {
          case "AIMessageChunk":
            //NOTE: DISABLE AI Message Chunk for now so that we don't double add messages on accident.
            //addMessage(parsedData.content, parsedData.type, parsedData.base_message);
            break;
          case "ai":
            addMessage(parsedData.content, parsedData.type, parsedData.base_message);
            break;
          case "tool":
            addMessage(parsedData.content, parsedData.type, parsedData.base_message);
            break;
          case "error":
            addMessage(parsedData.content, parsedData.type, parsedData.base_message);
            break;
          case "pong":
            lastPongTime = Date.now();
            break;
        }
      }
    });
  });

  function startConnectionCheck() {
    if (connectionCheckInterval) {
      clearInterval(connectionCheckInterval);
    }
    connectionCheckInterval = setInterval(updateConnectionStatus, 1000);
  }

  function updateConnectionStatus() {
    const timeSinceLastPong = Date.now() - lastPongTime;
    
    if (timeSinceLastPong < 30000) { // Less than 30 seconds
      updateStatusIcon('bg-green-500');
      redStatusStartTime = null;
      errorModalShown = false;
    } else if (timeSinceLastPong < 50000) { // Between 30-50 seconds
      updateStatusIcon('bg-yellow-400');
      redStatusStartTime = null;
      errorModalShown = false;
    } else { // More than 50 seconds
      updateStatusIcon('bg-red-500');
      if (!redStatusStartTime) {
        redStatusStartTime = Date.now();
      } else if (Date.now() - redStatusStartTime > 5000 && !errorModalShown) { // 5 seconds in red status
        showErrorModal();
      }
    }
  }

  function updateStatusIcon(statusClass) {
    const statusIndicator = document.getElementById('connectionStatusIconForLlamaBot');
    statusIndicator.classList.remove('bg-green-500', 'bg-yellow-400', 'bg-red-500');
    statusIndicator.classList.add(statusClass);
  }

  function showErrorModal() {
    const modal = document.getElementById('errorModal');
    const overlay = document.getElementById('modalOverlay');
    modal.classList.remove('hidden');
    overlay.classList.remove('hidden');
    errorModalShown = true;
  }

  function closeErrorModal() {
    const modal = document.getElementById('errorModal');
    const overlay = document.getElementById('modalOverlay');
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
  }

  // Toggle sidebar
  document.getElementById('toggle-sidebar').addEventListener('click', function() {
    const sidebar = document.getElementById('threads-sidebar');
    const toggleButton = this;
    isSidebarCollapsed = !isSidebarCollapsed;
    
    if (sidebar) {
      sidebar.classList.toggle('hidden');
    }
    toggleButton.classList.toggle('rotate-180');
  });

  async function loadThreads() {
    try {
      const response = await fetch('/llama_bot/agent/threads');
      const threads = await response.json();
      console.log('Loaded threads:', threads);  // Debug log
      
      const threadsList = document.getElementById('threads-list');
      if (threadsList) {
        threadsList.innerHTML = '';
        
        if (!threads || threads.length === 0) {
          console.log('No threads available');
          // Start with a blank conversation
          startNewConversation();
          return;
        }
        
        //sort conversation threads by creation date.
        threads.sort((a, b) => { // checkpoint_id in LangGraph checkpoints are monotonically increasing, so we know their order based on checkpoint_id          
          const checkpoint_id_a = a.state[2].configurable.checkpoint_id; //langgraph checkpoint object structure, derived from a breakpoint and inspecting object shape.
          const checkpoint_id_b = b.state[2].configurable.checkpoint_id;
          if (checkpoint_id_a === checkpoint_id_b) {
            return a.thread_id.localeCompare(b.thread_id);
          } else {
            return checkpoint_id_b.localeCompare(checkpoint_id_a);
          }
        });
        
        threads.forEach(thread => {
          const threadElement = createThreadElement(thread);
          threadsList.appendChild(threadElement);
        });
      }

      // Start with a blank conversation instead of loading the first thread
      startNewConversation();
    } catch (error) {
      console.error('Error loading threads:', error);
      // Start with a blank conversation on error
      startNewConversation();
    }
  }

  function createThreadElement(thread) {
    const threadElement = document.createElement('div');
    threadElement.className = 'p-3 hover:bg-gray-100 cursor-pointer border-b border-gray-200';
    const threadId = thread.thread_id || thread.id;
    
    // Parse timestamp from thread ID and format it nicely
    let displayText;
    if (threadId && threadId.match(/^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}$/)) {
      // Parse the timestamp format: YYYY-MM-DD_HH-MM-SS
      const [datePart, timePart] = threadId.split('_');
      const [year, month, day] = datePart.split('-');
      const [hour, minute, second] = timePart.split('-');
      
      const date = new Date(year, month - 1, day, hour, minute, second);
      displayText = date.toLocaleString('en-US', {
        month: 'short',
        day: 'numeric',
        hour: 'numeric',
        minute: '2-digit',
        hour12: true
      });
    } else {
      displayText = threadId || 'New Chat';
    }
    
    threadElement.textContent = displayText;
    threadElement.dataset.threadId = threadId;
    threadElement.onclick = () => {
      console.log('Clicked thread with ID:', threadId);  // Debug log
      loadThread(threadId);
    };
    return threadElement;
  }

  async function loadThread(threadId) {
    console.log('Loading thread:', threadId);  // Debug log
    
    if (!threadId) {
      console.error('No thread ID provided');
      return;
    }
    
    currentThreadId = threadId;
    const messagesDiv = document.getElementById('chat-messages');
    messagesDiv.innerHTML = '';

    try {
      const response = await fetch(`/llama_bot/agent/chat-history/${threadId}`);
      const threadState = await response.json();
      console.log('Loaded thread state:', threadState);  // Debug log
      
      if (Array.isArray(threadState) && threadState.length > 0) {
        // Get the messages array from the first state object
        const messages = threadState[0].messages || [];
        console.log('Processing messages:', messages);  // Debug log
        messages.forEach(message => { //NOTE: this is where you can access 
          if (message) {
            addMessage(message.content, message.type, message);
          }
        });
      }

      // Update active thread in sidebar
      document.querySelectorAll('[data-thread-id]').forEach(item => {
        item.classList.remove('bg-indigo-50', 'text-indigo-700');
        if (item.dataset.threadId === threadId) {
          item.classList.add('bg-indigo-50', 'text-indigo-700');
        }
      });
    } catch (error) {
      console.error('Error loading chat history:', error);
      addMessage('Error loading chat history', 'error');
    }
  }

  function startNewConversation() {
    currentThreadId = null;
    const messagesDiv = document.getElementById('chat-messages');
    messagesDiv.innerHTML = '';
    
    // Show welcome message
    showWelcomeMessage();
  }

  function showWelcomeMessage() {
    const messagesDiv = document.getElementById('chat-messages');
    const welcomeDiv = document.createElement('div');
    welcomeDiv.className = 'flex flex-col items-center justify-center h-full p-8 text-center text-gray-600';
    welcomeDiv.innerHTML = `
      <h2 class="text-2xl font-bold mb-2">Welcome</h2>
      <p class="text-lg">What's on the agenda?</p>
    `;
    messagesDiv.appendChild(welcomeDiv);
  }

  function showLoadingIndicator() {
    const loadingIndicator = document.getElementById('loading-indicator');
    loadingIndicator.classList.remove('hidden');
  }

  function hideLoadingIndicator() {
    const loadingIndicator = document.getElementById('loading-indicator');
    loadingIndicator.classList.add('hidden');
  }

  function selectPrompt(buttonElement) {
    const promptText = buttonElement.textContent;
    const messageInput = document.getElementById('message-input');
    
    // Populate the input field
    messageInput.value = promptText;
    
    // Focus the input field for better UX
    messageInput.focus();
    
    // Add a subtle animation to show the prompt was selected
    buttonElement.style.transform = 'scale(0.98)';
    setTimeout(() => {
      buttonElement.style.transform = '';
    }, 150);
  }

  function sendMessage() {
    const input = document.getElementById('message-input');
    const message = input.value.trim();
    
    if (message) {
      // Check if subscription is available
      if (!subscription) {
        console.error('WebSocket connection not established yet');
        addMessage('Connection not ready. Please wait...', 'error');
        return;
      }

      // Clear welcome message if it exists
      const welcomeMessage = document.querySelector('[class*="flex flex-col items-center justify-center"]');
      if (welcomeMessage) {
        welcomeMessage.remove();
      }
      
      addMessage(message, 'human');
      input.value = '';

      // Show loading indicator
      showLoadingIndicator();

      // Generate timestamp-based thread ID if we don't have one
      let threadId = currentThreadId;
      if (!threadId || threadId === 'global_thread_id') {
        // Create timestamp in format: YYYY-MM-DD_HH-MM-SS
        const now = new Date();
        threadId = now.getFullYear() + '-' + 
                  String(now.getMonth() + 1).padStart(2, '0') + '-' + 
                  String(now.getDate()).padStart(2, '0') + '_' + 
                  String(now.getHours()).padStart(2, '0') + '-' + 
                  String(now.getMinutes()).padStart(2, '0') + '-' + 
                  String(now.getSeconds()).padStart(2, '0');
        currentThreadId = threadId;
      }

      const messageData = {
        message: message,
        thread_id: threadId
      };
      
      console.log('Sending message with data:', messageData);  // Debug log
      subscription.send(messageData);
    }
  }

  /**
  * @param {string} text - The text content of the message
  * @param {string} sender - The sender of the message. This matches LangGraph schema -- either 'ai', 'tool', or 'human'. 'error' if an error occurs somewhere in the stack.
  * @param {object} base_message - The base message object. This is the object that is sent from LangGraph, and is used to parse the message.
  * @returns {void}
  */
  function addMessage(text, sender, base_message=null) {
    console.log('🧠 Message from LlamaBot:', text, sender, base_message);

    // Hide loading indicator when we receive an AI response
    if (sender === 'ai') {
      hideLoadingIndicator();
    }

    const messagesDiv = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    
    // Apply different styling based on sender
    if (sender === 'human') {
      messageDiv.className = 'flex justify-end mb-4';
      messageDiv.innerHTML = `
        <div class="bg-indigo-100 rounded-lg py-2 px-4 max-w-[80%]">
          <p class="text-gray-800">${text}</p>
        </div>
      `;
    } else if (sender === 'ai' || sender === 'AIMessageChunk') {
      messageDiv.className = 'flex mb-4';
      
      if (text === '' && base_message && base_message.additional_kwargs && base_message.additional_kwargs.tool_calls) {
        // Handle tool calls
        let tool_call = base_message.additional_kwargs.tool_calls[0];
        let function_name = tool_call.function.name;
        let function_arguments = JSON.parse(tool_call.function.arguments);

        // Store the tool call arguments for later use when displaying the result
        lastToolCallArgs[function_name] = function_arguments;
        console.log('💾 Stored tool call args for', function_name, ':', function_arguments);

        // Don't display the raw tool call - just store the args and return
        // The styled tool result will be shown instead
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
        return;
      } else {
        messageDiv.innerHTML = `
          <div class="prose prose-sm max-w-none bg-white border border-gray-200 rounded-lg py-2 px-4 max-w-[80%] shadow-sm">
            ${parseMarkdown(text)}
          </div>
        `;
      }
    } else if (sender === 'tool') {
      messageDiv.className = 'flex mb-4';

      if (base_message.name === 'run_rails_console_command') {
        const command_result = JSON.parse(base_message.content)['result'];
        messageDiv.innerHTML = `
          <div class="bg-gray-100 border border-gray-200 rounded-lg py-2 px-4 max-w-[80%]">
            <div class="flex items-center mb-1">
              <span class="text-gray-500 mr-2">🖥️</span>
              <span class="font-medium text-gray-700">Console Result</span>
            </div>
            <pre class="text-gray-800 text-sm overflow-x-auto">${command_result}</pre>
          </div>
        `;
      } else {
        // Try to parse the tool message content
        let toolData = null;
        try {
          toolData = JSON.parse(text);
        } catch (e) {
          // If not JSON, fall back to simple display
          messageDiv.innerHTML = `
            <div class="bg-gray-100 border border-gray-200 rounded-lg py-2 px-4 max-w-[80%]">
              <div class="flex items-center">
                <span class="text-gray-500 mr-2">🔨</span>
                <p class="text-gray-800">${text}</p>
              </div>
            </div>
          `;
          return;
        }

        // If we have structured tool data, display it nicely
        if (toolData && toolData.toolname) {
          const toolId = `tool-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
          const toolIcon = getToolIcon(toolData.toolname);
          const toolColor = getToolColor(toolData.toolname);

          // Use the stored tool call arguments if available, otherwise fall back to tool args from result
          const actualToolArgs = lastToolCallArgs[toolData.toolname] || toolData['tool args'] || {};
          console.log('🔧 Using tool args for display:', actualToolArgs, 'from lastToolCallArgs?', !!lastToolCallArgs[toolData.toolname]);

          messageDiv.innerHTML = `
            <div class="bg-white border-l-4 ${toolColor} shadow-sm rounded-lg py-3 px-4 max-w-[80%]">
              <!-- Tool Header -->
              <div class="flex items-center justify-between mb-2">
                <div class="flex items-center">
                  <span class="mr-2 text-lg">${toolIcon}</span>
                  <span class="font-semibold text-gray-800">${formatToolName(toolData.toolname)}</span>
                </div>
                <button onclick="toggleToolSection('${toolId}-args')" class="text-xs text-gray-500 hover:text-gray-700 px-2 py-1 rounded hover:bg-gray-100">
                  Args ▼
                </button>
              </div>

              <!-- Tool Arguments (Collapsible) -->
              <div id="${toolId}-args" class="hidden mb-2 bg-gray-50 rounded p-2 border border-gray-200">
                <div class="text-xs font-medium text-gray-600 mb-1">Arguments:</div>
                <div class="text-xs text-gray-700 space-y-1">
                  ${formatToolArgs(actualToolArgs)}
                </div>
              </div>

              <!-- Tool Output -->
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded p-3 border border-blue-100">
                <div class="flex items-center justify-between mb-1">
                  <div class="text-xs font-medium text-gray-600">Result:</div>
                  <button onclick="toggleToolSection('${toolId}-output')" class="text-xs text-blue-600 hover:text-blue-800">
                    ${toolData.toolname.startsWith('list') ? 'Show All' : 'Details'} ▼
                  </button>
                </div>
                <div id="${toolId}-output" class="max-h-32 overflow-y-auto">
                  ${formatToolOutput(toolData.toolname, toolData.tool_output, actualToolArgs)}
                </div>
              </div>
            </div>
          `;
        } else {
          // Fallback for unstructured tool messages
          messageDiv.innerHTML = `
            <div class="bg-gray-100 border border-gray-200 rounded-lg py-2 px-4 max-w-[80%]">
              <div class="flex items-center">
                <span class="text-gray-500 mr-2">🔨</span>
                <p class="text-gray-800">${text}</p>
              </div>
            </div>
          `;
        }
      }
    } else if (sender === 'error') {
      messageDiv.className = 'flex mb-4';
      messageDiv.innerHTML = `
        <div class="bg-red-100 border border-red-200 text-red-800 rounded-lg py-2 px-4 max-w-[80%]">
          <p>${text}</p>
        </div>
      `;
    }
    
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }

  document.getElementById('message-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });

     // Configure marked.js for better security and formatting
        marked.setOptions({
            breaks: true,
            gfm: true,
            sanitize: false, // We'll handle XSS prevention differently
            smartLists: true,
            smartypants: true
        });

        // Function to parse markdown to HTML
        function parseMarkdown(text) {
            if (!text) return '';
            
            try {
                // Parse markdown to HTML
                let html = marked.parse(text);
                
                // Basic XSS prevention - remove script tags and event handlers
                html = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
                html = html.replace(/\son\w+="[^"]*"/gi, '');
                html = html.replace(/\son\w+='[^']*'/gi, '');
                
                return html;
            } catch (error) {
                console.error('Markdown parsing error:', error);
                // Fallback to plain text with line breaks
                return text.replace(/\n/g, '<br>');
            }
        }
  
  // Helper function to get icon for tool
  function getToolIcon(toolname) {
    const iconMap = {
      'list_books': '📚',
      'list_chapters': '📖',
      'list_pages': '📄',
      'create_book': '✨',
      'create_chapter': '➕',
      'create_page': '📝',
      'generate_page_image': '🎨',
      'update_book': '✏️',
      'update_chapter': '✏️',
      'update_page': '✏️',
      'delete_book': '🗑️',
      'delete_chapter': '🗑️',
      'delete_page': '🗑️',
    };
    return iconMap[toolname] || '🔧';
  }

  // Helper function to get color for tool type
  function getToolColor(toolname) {
    if (toolname.startsWith('list')) return 'border-blue-400';
    if (toolname.startsWith('create')) return 'border-green-400';
    if (toolname.startsWith('update')) return 'border-yellow-400';
    if (toolname.startsWith('delete')) return 'border-red-400';
    if (toolname.includes('generate')) return 'border-purple-400';
    return 'border-gray-400';
  }

  // Helper function to format tool name
  function formatToolName(toolname) {
    return toolname
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  // Helper function to format tool arguments in a readable way
  function formatToolArgs(args) {
    if (!args || Object.keys(args).length === 0) {
      return '<span class="text-gray-500">No arguments</span>';
    }

    const argsList = Object.entries(args).map(([key, value]) => {
      const formattedKey = key.split('_').map(word =>
        word.charAt(0).toUpperCase() + word.slice(1)
      ).join(' ');

      let formattedValue = value;
      if (typeof value === 'string' && value.length > 100) {
        formattedValue = value.substring(0, 100) + '...';
      } else if (typeof value === 'object') {
        formattedValue = JSON.stringify(value);
      }

      return `<div class="flex gap-2"><span class="font-medium">${formattedKey}:</span><span>${formattedValue}</span></div>`;
    });

    return argsList.join('');
  }

  // Helper function to format tool output in a human-readable way
  function formatToolOutput(toolname, output, toolArgs = {}) {
    console.log('🔍 formatToolOutput called with:', { toolname, output, toolArgs });
    if (!output) return '<span class="text-gray-500 text-sm">No output</span>';

    // Handle list operations - show simple fetching message
    if (toolname === 'list_books') {
      const count = Array.isArray(output) ? output.length : 0;
      return `
        <div class="text-sm text-gray-600">
          📚 Fetching books... <span class="font-medium text-gray-700">(${count} found)</span>
        </div>
      `;
    }

    if (toolname === 'list_chapters') {
      const count = Array.isArray(output) ? output.length : 0;
      return `
        <div class="text-sm text-gray-600">
          📖 Fetching chapters... <span class="font-medium text-gray-700">(${count} found)</span>
        </div>
      `;
    }

    if (toolname === 'list_pages') {
      const count = Array.isArray(output) ? output.length : 0;
      return `
        <div class="text-sm text-gray-600">
          📄 Fetching pages... <span class="font-medium text-gray-700">(${count} found)</span>
        </div>
      `;
    }

    // Handle create operations
    if (toolname === 'create_book' && output) {
      return `
        <div class="space-y-1 text-sm">
          <div class="flex items-center text-green-600 font-medium">
            ✅ Created book${output.title ? `: "${output.title}"` : ''}
          </div>
          ${output.reading_level ? `<div class="text-gray-600"><span class="font-medium">Reading Level:</span> ${output.reading_level}</div>` : ''}
          ${output.learning_outcome ? `<div class="text-gray-600"><span class="font-medium">Learning Outcome:</span> ${output.learning_outcome}</div>` : ''}
        </div>
      `;
    }

    if (toolname === 'create_chapter' && output) {
      return `
        <div class="space-y-1 text-sm">
          <div class="flex items-center text-green-600 font-medium">
            ✅ Created chapter${output.title ? `: "${output.title}"` : ''}
          </div>
          ${output.description ? `<div class="text-gray-600"><span class="font-medium">Description:</span> ${output.description}</div>` : ''}
        </div>
      `;
    }

    if (toolname === 'create_page' && output) {
      return `
        <div class="space-y-1 text-sm">
          <div class="flex items-center text-green-600 font-medium">✅ Created page</div>
          ${output.content ? `<div class="text-gray-600">${output.content.substring(0, 100)}${output.content.length > 100 ? '...' : ''}</div>` : ''}
        </div>
      `;
    }

    // Handle update operations
    if (toolname.startsWith('update_') && output) {
      const resourceType = toolname.replace('update_', '');

      // For the header, we want to show what type of resource was updated
      // e.g., "Book", "Chapter", "Page"
      let resourceName = resourceType.charAt(0).toUpperCase() + resourceType.slice(1);

      // Add the resource name if available (for books, use title; for others, use a generic label)
      if (resourceType === 'book' && output.title) {
        resourceName = output.title;
      } else if (resourceType === 'chapter' || resourceType === 'page') {
        resourceName = resourceType.charAt(0).toUpperCase() + resourceType.slice(1);
      }

      // Build a list of fields that were ACTUALLY updated (present in toolArgs, excluding IDs)
      let updatedFields = [];
      const fieldMapping = {
        'title': 'Title',
        'description': 'Description',
        'reading_level': 'Reading Level',
        'learning_outcome': 'Learning Outcome',
        'content': 'Content'
      };

      // Check which fields are present in toolArgs (these are the fields that were updated)
      // Then get the values from the output
      console.log('📝 Update Debug - toolArgs:', toolArgs);
      console.log('📝 Update Debug - output:', output);

      // Get list of field keys from toolArgs (these indicate what was updated)
      const updatedFieldKeys = Object.keys(toolArgs).filter(key => fieldMapping[key]);

      // Use the fields identified in toolArgs and get values from output
      updatedFieldKeys.forEach(key => {
        let value = output[key];
        if (value !== undefined) {
          if (key === 'content' && value.length > 150) {
            value = value.substring(0, 150) + '...';
          }
          console.log('📝 Adding field:', fieldMapping[key], '=', value);
          updatedFields.push(`<div class="text-gray-700">
            <span class="font-medium">${fieldMapping[key]}:</span> ${value}
          </div>`);
        }
      });

      console.log('📝 Final updatedFields array:', updatedFields);

      // If no fields were identified, show generic message
      if (updatedFields.length === 0) {
        return `
          <div class="text-sm">
            <div class="font-semibold text-gray-800">
              ✅ ${resourceName}
            </div>
            <div class="text-gray-600 mt-1">Updated</div>
          </div>
        `;
      }

      return `
        <div class="space-y-1 text-sm">
          <div class="font-semibold text-gray-800">
            ✅ ${resourceName}
          </div>
          <div class="text-gray-600 text-xs mb-1">Updated:</div>
          <div class="space-y-1 pl-2">
            ${updatedFields.join('')}
          </div>
        </div>
      `;
    }

    // Handle delete operations
    if (toolname.startsWith('delete_')) {
      const resourceType = toolname.replace('delete_', '');

      console.log('🗑️ Delete operation - output:', output);

      // Get what was deleted from the output (title if available)
      // The structure can be output.title or output.chapter.title or output.book.title or output.page
      let deletedName = '';
      if (output && output.title) {
        deletedName = output.title;
      } else if (output && output.chapter && output.chapter.title) {
        deletedName = output.chapter.title;
      } else if (output && output.book && output.book.title) {
        deletedName = output.book.title;
      } else if (output && output.page) {
        // For pages, show content preview if available
        if (output.page.content) {
          const preview = output.page.content.substring(0, 60);
          deletedName = preview + (output.page.content.length > 60 ? '...' : '');
        } else {
          deletedName = 'Page';
        }
      } else {
        // Fallback to generic resource type if no title
        deletedName = resourceType.charAt(0).toUpperCase() + resourceType.slice(1);
      }

      console.log('🗑️ Deleted name:', deletedName);

      return `
        <div class="space-y-1 text-sm">
          <div class="font-semibold text-gray-800">
            ✅ ${deletedName}
          </div>
          <div class="text-red-600 text-xs">Deleted</div>
        </div>
      `;
    }

    // Handle generate_page_image
    if (toolname === 'generate_page_image' && output) {
      return `
        <div class="space-y-1 text-sm">
          <div class="flex items-center text-purple-600 font-medium">✅ Image generated successfully</div>
          ${output.image_url ? `
            <div class="mt-2">
              <img src="${output.image_url}" alt="Generated page image" class="rounded border border-gray-200 max-w-full h-auto" />
            </div>
          ` : ''}
        </div>
      `;
    }

    // Fallback to formatted JSON for unknown structures
    return `<pre class="text-sm text-gray-800 overflow-x-auto whitespace-pre-wrap">${JSON.stringify(output, null, 2)}</pre>`;
  }

  // Toggle function for collapsible sections
  function toggleToolSection(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
      element.classList.toggle('hidden');

      // Toggle the expand/collapse state
      if (elementId.includes('output')) {
        element.classList.toggle('max-h-32');
        element.classList.toggle('max-h-none');
      }
    }
  }

  // Add CSS for loading dots animation and other utilities
  const style = document.createElement('style');
  style.textContent = `
    .loading-dots:after {
      content: '.';
      animation: dots 1.5s steps(5, end) infinite;
    }

    @keyframes dots {
      0%, 20% { content: '.'; }
      40% { content: '..'; }
      60% { content: '...'; }
      80%, 100% { content: ''; }
    }

    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  `;
  document.head.appendChild(style);
</script>